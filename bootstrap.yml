---

# This playbook aims to implement a flexible bare-metal setup.

# For this, we need some way to execute comamnds on the system, as it is, well,
# bare (or in any unknown state).
#
# For newly aquired root servers, this usually is an NFS rescue system.
# We assume that we're booted into one such system, and that our inventory has
# that rescue system access configured as 'rescue-{{ inventory_hostname }}' and
# that we have sufficient credentials to connect there. That rescue system's
# SSH host key is ignored, as it's usually a throwaway hostkey anyway and we
# don't have any way to verify it.
#
# Bootstrapping of the remote system will happen in a number of steps:
# 1) before we begin, we check whether we actually should run for this system
# 2) then, prepare the disk devices by stopping whatever is still using it,
#    partitioning them, formatting, encrypting, whatever. this step mounts our
#    filesystems so that we can start installing the operating system
# 3) the operating system is installed into the prepared disks with debootstrap
# 4) setup the chroot from the outside so that we can connect there in the next
#     step. this creates an ansible role account, sets up sshd and sudo.
# 5) this secondary ssh server is used to do basic preparation of the chroot
#    from within (bootloaders, networking)

- hosts: 'reimage_nfs'
  accelerate: false
  gather_facts: no

  tasks:
###############################################################################
## 1) Make sure we're on the correct system and can connect there

    - name: Verify magic hostvar allowing us to wipe the target
      assert:
        that:
          - may_wipe_system == "YesWipeSystem"

    - include: include/use_jumphost.yml name=rescue-{{ inventory_hostname }} trust=true

    - include: include/disk-autodetect-mbr+raid.yml

    ###########################################################################
    ## Scene 2: install target system os into chroot

    - name: debootstrap base system
      command: debootstrap --include sudo,openssh-server,linux-image-amd64,grub-pc,busybox,firmware-linux-free,dropbear,kbd,console-setup,python,aptitude{{ extra_packages }} {{ target_release }} {{ dir_root }} http://{{ debian_mirror | default("ftp.de.debian.org") }}/debian
      delegate_to: '{{ jumphost }}'

###############################################################################
## 4) Start in-chroot sshd so we can connect there

    - command: 'mount --bind /{{ item }} {{ dir_root }}/{{ item }}'
      with_items:
        - dev
        - dev/pts
        - proc
        - sys
      delegate_to: '{{ jumphost }}'

    - name: switch ssh port to 516
      lineinfile: "dest={{ dir_root }}/etc/ssh/sshd_config line='Port 516' regexp='^Port'"
      delegate_to: '{{ jumphost }}'

    - command: chroot {{ dir_root }} service ssh start
      delegate_to: '{{ jumphost }}'

    - name: fetch remote ssh host key
      delegate_to: localhost
      become: false
      # ansible resolves ansible_ssh_host to the delegate here, which is localhost. that's not what we want.
      shell: ssh-keyscan -t ecdsa -p 516 {{ ansible_ssh_host }} | grep -v '^#' | grep -v '^no hostkey alg$'
      register: hostkeys
      changed_when: false

    - name: update current ssh host key
      delegate_to: localhost
      become: false
      # FIXME this doesn't work correctly when hostkeys.stdout contains more than one key
      lineinfile:
        dest: "{{ lookup('env', 'HOME' )}}/.ssh/known_hosts"
        backup: yes
        line: '{{ ansible_ssh_host }},{{ hostkeys.stdout }}'
        regexp: '{{ ansible_ssh_host }},{{ inventory_hostname }}'

    # pre-play role/prepare

    - name: Add ansible role account
      command: 'chroot {{ dir_root }} adduser --uid 1200 --disabled-password --gecos "ansible user" {{ ansible_role_account }}'
      args:
        creates: '{{ dir_root }}/home/{{ ansible_role_account }}'
      delegate_to: '{{ jumphost }}'

    - name: Create SSH directory
      # copy with wrong file modes as we're copying into the rescue system. will be fixed below
      file: path={{ dir_root }}/home/{{ ansible_role_account }}/.ssh state=directory owner=root mode=755
      delegate_to: '{{ jumphost }}'

    - name: Copy authorized_keys for ansible remote user
      # copy with wrong file modes as we're copying into the rescue system. will be fixed below
      copy:
        src: files/ansible_authorized_keys
        dest: '{{ dir_root }}/home/{{ ansible_role_account }}/.ssh/authorized_keys'
        owner: root
        group: root
        mode: 0444
      delegate_to: '{{ jumphost }}'

    - name: Install sudoers
      command: chroot {{ dir_root }} aptitude install sudo
      args:
        creates: '{{ dir_root }}/usr/bin/sudo'
      delegate_to: '{{ jumphost }}'

    - name: Copy sudoers
      template: src=templates/sudoers.j2 dest={{ dir_root }}/etc/sudoers.d/ansible group=root owner=root mode=440
      delegate_to: '{{ jumphost }}'

###############################################################################
## 5) Setup target system to be rebootable

# for some reason, we've lost our apt sources list
- hosts: 'reimage_nfs'
  accelerate: false
  gather_facts: no

  tasks:
    - name: Configure minimal sources.list file
      # when this task fails, probably the files/ansible_authorized_keys pubkey isn't what it should be.
      lineinfile:
        dest: /etc/apt/sources.list
        line: 'deb http://{{ debian_mirror | default("ftp.de.debian.org") }}/debian {{ target_release }} main'
    - command: apt-get update

# second play
#   we can connect as our service user, now set it up so that ansible can run
- hosts: 'reimage_nfs'
  accelerate: false
  gather_facts: no

  tasks:
    # needed for variable discovery
    - name: install lsb-release
      apt: name="lsb-release" state=present
      register: result
      ignore_errors: True

    - name: install python-apt (for lsb-release)
      command: aptitude install --assume-yes python-apt
      when: result|failed

    - name: install lsb-release (try again)
      apt: name="lsb-release" state=present
      when: result|failed

    - name: Create SSH directory
      file: path=/home/{{ ansible_role_account }}/.ssh state=directory owner={{ ansible_role_account }} mode=700

    - name: Copy authorized_keys for ansible remote user
      copy:
        src: files/ansible_authorized_keys
        dest: '/home/{{ ansible_role_account }}/.ssh/authorized_keys'
        owner: '{{ ansible_role_account }}'
        group: '{{ ansible_role_account }}'
        mode: 0400

# third play
#   setup system so that it's rebootable
- hosts: 'reimage_nfs'
  accelerate: false

  tasks:
    - lineinfile:
        dest: /etc/fstab
        line: '{{ dev_root }}  /  ext4  errors=remount-ro,user_xattr  0  1'
    - lineinfile:
        dest: /etc/fstab
        line: 'LABEL=boot /boot ext3 defaults 0 2'
      # exists? probably because manual mount above
    - file: path=/etc/mtab state=link src=/proc/mounts

    - lineinfile: dest=/etc/default/grub regexp='GRUB_CMDLINE_LINUX_DEFAULT=' line='GRUB_CMDLINE_LINUX_DEFAULT="quiet ip={{ network.eth0.address }}::{{ network.eth0.gateway }}:{{ network.eth0.netmask }}:{{ inventory_hostname }}:eth0:none"'
    - command: update-grub
    - command: update-initramfs -k all -u
    - command: grub-install /dev/sda

    - name: Configure /etc/network/interfaces
      template: src=templates/interfaces.j2 dest=/etc/network/interfaces

#    - command: reboot
#      delegate_to: '{{ jumphost }}'

#    - name: waiting for server to come back
#      local_action: 'wait_for host={{ inventory_hostname }} port={{ ansible_ssh_port | default(22) }} state=started'
#      sudo: false

